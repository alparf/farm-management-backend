import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ValidationPipe } from '@nestjs/common';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  
  // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ –≤ production!)
  app.enableCors({
    origin: true, // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins
    methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS', 'HEAD'],
    allowedHeaders: ['Content-Type', 'Authorization', 'Accept', 'Origin'],
    credentials: true,
    preflightContinue: false,
    optionsSuccessStatus: 204
  });
  
  app.useGlobalPipes(new ValidationPipe({
    whitelist: true,
    transform: true,
  }));
  
  const port = process.env.PORT || 3000;
  const host = '0.0.0.0'; // –í–∞–∂–Ω–æ: —Å–ª—É—à–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
  
  await app.listen(port, host);
  console.log(`üöÄ Farm Management API –∑–∞–ø—É—â–µ–Ω:`);
  console.log(`   –õ–æ–∫–∞–ª—å–Ω–æ: http://localhost:${port}`);
  console.log(`   –í —Å–µ—Ç–∏: http://${getNetworkIp()}:${port}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–∞ –≤ —Å–µ—Ç–∏
function getNetworkIp(): string {
  const os = require('os');
  const interfaces = os.networkInterfaces();
  
  for (const name of Object.keys(interfaces)) {
    for (const interfaceInfo of interfaces[name]) {
      const { address, family, internal } = interfaceInfo;
      if (family === 'IPv4' && !internal) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Docker –∏ –¥—Ä—É–≥–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        if (!address.startsWith('172.') || !address.startsWith('docker')) {
          return address;
        }
      }
    }
  }
  return 'localhost';
}

bootstrap();